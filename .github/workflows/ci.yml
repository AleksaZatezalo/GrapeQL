name: CI Pipeline

on:
  # Trigger on pull requests to main/master
  pull_request:
    branches: [ main, master ]
  # Also trigger on pushes to main/master
  push:
    branches: [ main, master ]

jobs:
  # Code Quality Job
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10]
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Run Black (Code Formatting)
      run: |
        black --check --diff grapeql/ tests/
        
    - name: Run isort (Import Sorting)
      run: |
        isort --check-only --diff grapeql/ tests/
        
    - name: Run flake8 (Linting)
      run: |
        flake8 grapeql/ tests/
        
    - name: Run mypy (Type Checking)
      run: |
        mypy grapeql/
        
    - name: Run bandit (Security Linting)
      run: |
        bandit -r grapeql/ -f json -o bandit-report.json
        bandit -r grapeql/
        
    - name: Upload bandit results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-results-${{ matrix.python-version }}
        path: bandit-report.json

  # Testing Job
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10]
        
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Run Unit Tests
      run: |
        pytest tests/ -v --tb=short --cov=grapeql --cov-report=xml --cov-report=html --cov-report=term
        
    - name: Upload Coverage Reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Upload Coverage Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: htmlcov/

  # Integration Tests (if you have them)
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: 3.10
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Run Integration Tests
      run: |
        pytest tests/ -m integration -v --tb=short

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Documentation Check
  docs:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.10
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install sphinx sphinx-rtd-theme
        
    - name: Build Documentation
      run: |
        # Create docs if they don't exist
        if [ -d "docs" ]; then
          cd docs && make html
        else
          echo "No docs directory found, skipping documentation build"
        fi